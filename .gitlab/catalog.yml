---
catalog-pr-create:
  rules:
    - !reference [ .on_scheduled_main ]
  stage: catalog
  needs:
    - btf-generate-direct-x64
    - btf-generate-amzn-x64
    - btf-generate-rhel-7
    - btf-generate-rhel-8-x64
    - btf-generate-rhel-8-arm64
  image: "registry.ddbuild.io/$CI_IMAGE_REPO/ubuntu:$IMAGE_VERSION"
  tags:
    - "arch:amd64"
  variables:
    GITHUB_PEM_PATH: "${CI_PROJECT_DIR}/github_app_key.pem"
  script:
    - CC=clang go build ./cmd/btfhub
    - !reference [.github_auth]
    - !reference [.catalog_checkout]
    - ./btfhub -hash-dir .tmp/hash -catalog-json rc-employee-configurations/configs/BTF_DD/btfs.json catalog-update
    - cd rc-employee-configurations
    - |
      set -x
      git config --local user.name "dd-btfhub-ebpf-platform[bot]"
      git config --local user.email "205981682+dd-btfhub-ebpf-platform[bot]@users.noreply.github.com"
      # Define a stable branch for updates
      BRANCH_NAME="btfhub-catalog-update"
      # Stash any local changes to avoid checkout conflicts
      STASH_OUTPUT="$(git stash push -u -m "Temporary stash for catalog update" 2>&1)"
      echo "${STASH_OUTPUT}"
      # Checkout the existing branch or create it from main
      if git ls-remote --exit-code origin "${BRANCH_NAME}"; then
        git fetch origin "${BRANCH_NAME}:${BRANCH_NAME}"
        git checkout "${BRANCH_NAME}"
        # Reset to main to discard any previous changes on the branch
        git reset --hard origin/main
      else
        git checkout -b "${BRANCH_NAME}" origin/main
      fi
      # Restore the local changes only if we actually stashed something
      if [[ ! "${STASH_OUTPUT}" =~ "No local changes to save" ]]; then
        git stash pop
      fi
      # Stage the new catalog changes
      git add -A
      if git diff-index --quiet HEAD; then
        echo "No changes"
        exit 0
      fi
      # Create a fresh commit for the catalog update
      git commit -m "BTF_DD catalog update on $(date -u +%Y-%m-%d)"
      git push --force origin "${BRANCH_NAME}"
      # Only create a PR if none is already open for this branch
      if gh pr list -R DataDog/rc-employee-configurations --head "${BRANCH_NAME}" --state open | grep -q '.'; then
        echo "PR already open"
      else
        gh pr create -R DataDog/rc-employee-configurations -B main -f --head "${BRANCH_NAME}"
      fi
