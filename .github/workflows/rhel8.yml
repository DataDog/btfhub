name: RHEL 8
on:
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch: {}
env:
  CONTAINER: registry.access.redhat.com/ubi8/ubi:latest
  CONTAINER_NAME: build-container
  GO_VERSION: 1.21.13
  BTFHUB_NO_SUDO: true
jobs:
  rhel8-update:
    strategy:
      matrix:
        platform_arch: [ "amd64", "arm64" ]
        include:
          - platform_arch: "amd64"
            os: "ubuntu-24.04"
            btfhub_arch: "x86_64"
            repo_arch: "x86_64"
          - platform_arch: "arm64"
            os: "arm-4core-linux-ubuntu24.04"
            btfhub_arch: "arm64"
            repo_arch: "aarch64"
    name: rhel 8 ${{ matrix.btfhub_arch }}
    runs-on: "${{ matrix.os }}"
    steps:
      - name: github authenticate
        run: |
          gh auth login --with-token <<<'${{ secrets.DD_BTFHUB_BOT_GITHUB_TOKEN }}'

      - name: checkout btfhub
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          token: ${{ secrets.DD_BTFHUB_BOT_GITHUB_TOKEN }}
          submodules: 'recursive'

      - name: checkout btfhub-archive
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          repository: DataDog/btfhub-archive
          ref: main
          token: ${{ secrets.DD_BTFHUB_BOT_GITHUB_TOKEN }}
          path: archive
          sparse-checkout: |
            rhel/8/${{ matrix.btfhub_arch }}

      # We manually start a container and execute scripts in it instead of using `jobs.build.container`,
      # otherwise we couldn't use GitHub-provided actions (checkout, cache, etc.) as they rely on Node20
      # which would not necessarily be available on some containers (e.g., Ubuntu 18.04).
      #
      # See: https://github.com/actions/checkout/issues/1590
      #
      - name: Start Docker Container
        run: |
          docker pull $CONTAINER
          docker run \
            --name $CONTAINER_NAME \
            -d \
            -e GO_VERSION \
            -v ${{ github.workspace }}:/workspace \
            --platform linux/${{ matrix.platform_arch }} \
            $CONTAINER \
            tail -f /dev/null

      - name: install packages
        env:
          SCRIPT: |
            set -e
            rm -rf /etc/rhsm-host
            subscription-manager register --org=${{ secrets.DD_BTFHUB_RHEL_ORG_ID }} --activationkey="btfhub-ci"
            subscription-manager repos --enable="rhel-8-for-${{ matrix.repo_arch }}-baseos-debug-rpms"
            subscription-manager repos --enable="rhel-8-for-${{ matrix.repo_arch }}-baseos-eus-debug-rpms"
            subscription-manager release --set=8.1
            yum install -y yum-utils clang wget bzip2 zlib-devel m4 xz gzip cmake make gcc ncurses-compat-libs
        run: docker exec $CONTAINER_NAME bash -c "$SCRIPT"

      - name: setup safe git directories
        env:
          SCRIPT: |
            set -e
            git config --system --add safe.directory /workspace
            git config --system --add safe.directory /workspace/3rdparty/dwarves
            git config --system --add safe.directory /workspace/3rdparty/bpftool
        run: docker exec -w /workspace $CONTAINER_NAME bash -c "$SCRIPT"

      - name: install go
        env:
          script: |
            set -e
            wget -nv https://go.dev/dl/go$GO_VERSION.linux-${{ matrix.platform_arch }}.tar.gz
            tar -C /root -xzf go$GO_VERSION.linux-${{ matrix.platform_arch }}.tar.gz
        run: docker exec -w /workspace $CONTAINER_NAME bash -c "$SCRIPT"

      - uses: ./.github/actions/build-elfutils
        with:
          container-name: $CONTAINER_NAME

      - name: build tar
        env:
          SCRIPT: |
            set -e
            wget -nv https://ftpmirror.gnu.org/tar/tar-1.35.tar.xz
            tar xf tar-1.35.tar.xz
            cd tar-1.35
            FORCE_UNSAFE_CONFIGURE=1 ./configure --prefix=/usr
            make -j "$(nproc)" install
        run: docker exec -w /workspace $CONTAINER_NAME bash -l -c "$SCRIPT"

      - name: install clang
        env:
          SCRIPT: |
            set -e
            yum remove -y clang
            if [[ "${{ matrix.btfhub_arch }}" == "x86_64" ]]; then
              wget -nv https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
              tar xf clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
              mv clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu- clang
            else
              wget -nv https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-aarch64-linux-gnu.tar.xz
              tar xf clang+llvm-12.0.1-aarch64-linux-gnu.tar.xz
              mv clang+llvm-12.0.1-aarch64-linux-gnu clang
            fi
            echo 'export PATH=/workspace/clang/bin:${{ '$PATH' }}' >> /etc/profile
        run: docker exec -w /workspace $CONTAINER_NAME bash -l -c "$SCRIPT"

      - name: build pahole
        env:
          SCRIPT: |
            set -e
            mkdir build
            cd build
            cmake -D__LIB=lib -DDWARF_INCLUDE_DIR=/usr/include ..
            make -j "$(nproc)" install
            echo "/usr/local/lib" >> /etc/ld.so.conf.d/pahole.conf
            ldconfig
        run: docker exec -w /workspace/3rdparty/dwarves $CONTAINER_NAME bash -l -c "$SCRIPT"

      - name: build bpftool
        env:
          SCRIPT: |
            set -e
            make -j "$(nproc)" -C src/ V=1 install
        run: docker exec -w /workspace/3rdparty/bpftool $CONTAINER_NAME bash -l -c "$SCRIPT"

      - name: build btfhub
        env:
          SCRIPT: |
            set -e
            CMD_GO=/root/go/bin/go make
        run: docker exec -w /workspace $CONTAINER_NAME bash -l -c "$SCRIPT"

      - name: generate BTFs
        env:
          SCRIPT: |
            set -e
            ./btfhub -workers 6 -d rhel -r 8 -a ${{ matrix.btfhub_arch }}
        run: docker exec -w /workspace $CONTAINER_NAME bash -c "$SCRIPT"

      - name: check status
        run: |
          cd archive
          git status

      - name: commit and push to btfhub-archive
        run: |
          cd archive
          git config --local user.name "Bryce Kahle"
          git config --local user.email "bryce.kahle@datadoghq.com"
          git add -A
          git diff-index --quiet HEAD || git commit -m "rhel 8 ${{ matrix.btfhub_arch }} update on $(date -u +%Y-%m-%d)"
          git push || (git pull --rebase && git push)

      - name: unregister from RHEL
        if: always()
        env:
          SCRIPT: |
            set -e
            subscription-manager remove --all
            subscription-manager unregister
            subscription-manager clean
        run: docker exec -w /workspace $CONTAINER_NAME bash -c "$SCRIPT"
